#!/usr/bin/env node
var debug = require('debug')('InHouseAppStore');
var program = require('commander');
var checksum = require('checksum');
var fs = require('fs');
var poster = require('poster');
var aes = require('aes-helper');

program
  .version('0.0.1', '-V, --version')
  .usage('[options] <file>')
  .option('-a, --appname <appname>', 'Uploaded file app name')
  .option('-o, --os <os>', 'Uploaded file os target')
  .option('-v, --appversion <version>', 'Uploaded file version')
  .option('-sp, --securePassword  <secure password>', 'Secure password saved in server config')
  .option('-pk, --privateKey <privatekey>', 'The private key generated by the server the first time was launch (NEEDED)')
  .option('-i, --host <host>', 'Address of server')
  .option('-p, --port <port>', 'Port of server')
  .option('-s, --secure', 'use HTTPS SSL layer')
  .parse(process.argv);

var appName = program.appname;
var os = program.os;
var version = program.appversion;
var secureToken = program.securePassword || "";
var primaryKeyFile = program.privateKey;
var host = program.host;
var port = program.port || 80;
var secure = program.secure;
var file = program.args[0];

if(!appName) {
  console.log("No App name defined");
  process.exit(1);
} else if(!os) {
  console.log("No OS defined");
  process.exit(1);
} else if(!version) {
  console.log("No Version defined");
  process.exit(1);
} else if(!host) {
  console.log("No Host defined");
  process.exit(1);
} else if(!file) {
  console.log("No File to upload");
  process.exit(1);
} else if(!primaryKeyFile) {
  console.log("No primary key file given");
  process.exit(1);
} else {

  fs.readFile(primaryKeyFile, function(error, fileData) {
    if(error) {
      console.log("Error in reading primary key file : " + error);
      process.exit(error);
    } else {
      var primaryKey = fileData.toString();
      var token = aes.encrypt(secureToken, primaryKey);

      checksum.file(file, {algorithm: "sha256"}, function(error, checkSum) {
        if(error) {
          console.log("Error in checksuming file : " + error);
          process.exit(error);

        } else {

          var requestUrl = (secure?"https://":"http://") + host + ":" + port + "/upload/" + encodeURIComponent(appName) + "/type/" + (os=="android"?"android": "ios") + "/version/" + encodeURIComponent(version) + "/" + checkSum;

          var options = {
            uploadUrl: requestUrl,
            method: 'POST',
            fileId: 'file',
            fields: {
            },
            uploadHeaders: {
              "AppToken": token
            }
          };

          poster.post(file, options, function(err, data) {
            if (!err) {
              console.log(data);
              process.exit(0);
            } else {
              console.log("Can't upload app: " + err);
              process.exit(1);
            }
          });
        }
      });

    }
  });


}
